{{#demo-css}}
<div class="container">
  <h1 id="title"><a href="https://github.com/lifegadget/ui-knob">ui-knob</a></h1>
  <h2>A touch friendly knob to use in your ember apps</h2>

  <h3>Background</h3>
  Anthony Terrien built a very nice and popular jQuery widget called <a href="http://anthonyterrien.com/knob"><prop>jQuery-Knob</prop></a> which this addon wraps around making it easy for Ember developers to join in on the fun.

  <h3>Interactive Demo</h3>
  <div class="row">
    <div class="col-xs-6 col-md-4">
      {{ui-knob
        value=value
        min=min
        max=max
        step=step
        width=width
        height=height
        thickness=thickness
        angleOffset=angleOffset
        angleArc=angleArc
        cursor=cursor
        displayInput=displayInput
        displayPrevious=displayPrevious
        lineCap=lineCap
        readOnly=readOnly
        selectedColor=selectedColor
        unselectedColor=unselectedColor

        onChange=(mut value)
        onError=(action 'onError')
      }}
    </div>
    <div class="col-xs-6 col-md-4">
      <code class='handlebars'>
        {{display-component
          componentName='ui-knob'
          value=value
          min=min
          max=max
          step=step
          width=width
          height=height
          thickness=thickness
          angleOffset=angleOffset
          angleArc=angleArc
          cursor=cursor
          displayInput=displayInput
          displayPrevious=displayPrevious
          lineCap=lineCap
          readOnly=readOnly
          selectedColor=selectedColor
          unselectedColor=unselectedColor

          onChange=(mut value)
          onError=(action 'onError')
       }}
      </code>
    </div>
    <div class="col-xs-12 col-md-4">
        <controls>
        <control>
          <span class='name'>min:</span>
          <span>
            {{text-input value=min step=10 skin='flat' size='small' defaultValue=0 onChange=(mut min)}}
          </span>
          <span class='name'>max:</span>
          <span>
            {{text-input
              value=max
              step=10
              skin='flat'
              size='small'
              onBlur=(mut max)
            }}
          </span>
          <span class='name'>thickness:</span>
          <span>
            {{text-input
              value=thickness
              skin='flat'
              size='small'
              min=0
              max=1
              step=0.1
            }} &nbsp;
          </span>
        </control>
        <control>
          <span class='name'>step:</span>
          <span>
            {{text-input
              value=step
              skin='flat'
              size='small'
              onBlur=(mut step)
            }}
          </span>

          <span class='name'>angleOffset:</span>
          <span>
            {{text-input
              value=angleOffset
              skin='flat'
              size='small'
              onBlur=(mut angleOffset)
            }}
          </span>
          <span class='name'>angleArc:</span>
          <span>
            {{text-input
              value=angleArc
              skin='flat'
              size='small'
              onBlur=(mut angleArc)
            }}
          </span>
        </control>
        <control>
          <span class='name'>display input:</span>
          <span>
            {{ui-toggle-button
              size='small'
              outline=true
              on='show'
              false='hide'
              value=displayInput
              onToggle=(mut displayInput)
            }}
          </span>
          <span class='name'>display previous:</span>
          <span>
            {{ui-toggle-button
              size='small'
              outline=true
              on='show'
              false='hide'
              value=displayPrevious
              onToggle=(mut displayPrevious)
            }}
          </span>
        </control>
        <control>
          <span class='name'>line cap:</span>
          <span>
            {{ui-buttons
              buttons='butt,round'
              cardinality='1:1'
              value=lineCap
              onChange=(mut lineCap)
            }}
          </span>
          <span class='name'>read only:</span>
          <span>
            {{ui-toggle-button
              on='true'
              false='false'
              value=readOnly
              onToggle=(mut readOnly)
            }}
          </span>
        </control>
        <control>
          <span class='name'>cursor</span>
          <span>
            {{ui-buttons
              buttons='off:::false,1,3,5,10,25'
              cardinality='1:1'
              value=cursor
              onChange=(mut cursor)
            }}
          </span>
        </control>
        <control>
          <span class='name'>selectedColor:</span>
          <span>
            {{text-input value=selectedColor skin='flat' size='small' defaultValue='#66CC66' onBlur=(mut selectedColor)}}
          </span>
          <span class='name'>unselectedColor:</span>
          <span>
            {{text-input value=unselectedColor skin='flat' size='small' defaultValue='#EFEEEE' onBlur=(mut unselectedColor)}}
          </span>
        </control>
        </controls>
    </div>
  </div> {{! End ROW }}

  <h3>Topics</h3>
  <h4>Focus</h4>
  <div class="row">
    <div class="explanation col-xs-9">
      <p>
        This component serves as an input and therefore is "focusable" like any other HTML input control. The browser's default styling for this though is an ugly blue box which may work for a rectangular input but not a circular one. Therefore the knob's <code>outline</code> CSS property has been set to "none" and in its place we programatically ensure that the {{ui-label '.focused'}} class is added to the knob when it is focused.
      </p>
      <p>
        Furthermore, to make sure there is a visual indication "out of the box" we have set the "unselected" region of the knob to have an opacity of 0.8 which moves to 1.0 when in focus.
      </p>
    </div>
    <div class="demo col-xs-3">
      {{ui-knob width=50 height=50 value=2 min=1 max=10}}
      {{ui-knob width=50 height=50 value=5 min=1 max=10}}
      {{ui-knob width=50 height=50 value=10 min=1 max=10}}
    </div>
  </div>
  <h4>Colors</h4>
  <div class="row">
    <div class="explanation col-xs-9">
      <p>
        The preferred and default method of setting colors on this component is setting the CSS property values. So let's look at the various functional targets and their their CSS selectors are:
      </p>
      <table class='table'>
        <tr>
          <td>{{ui-label 'knob .unselected'}}</td>
          <td>
            this represents the arc which is defined by the <code>angleArc</code> and <code>angleOffset</code> properties.
          </td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .selected'}}</td>
          <td>this is the section which represents the range (in degrees of the arc) which represent the currently set value</td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .selected-padding'}}</td>
          <td>
            If padding is turned on (by setting the <code>displayPadding</code> property) then both sides of the selected value will be highlighted.
          </td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .background-color'}}</td>
          <td>
            Determines the <i>circular</i> background color. By default this is white and would not be visible on many websites. Also, if you change the <code>outline</code> property on the knob you're able to extend the diameter of the background of the knob beyond the
          </td>
        </tr>
      </table>
      <p>
        Please note that all of the default selectors set both the <code>stroke</code> and <code>fill</code> properties of SVG.
      </p>

    </div>
    <div class="demo col-xs-3">

    </div>
  </div>
</div>
{{/demo-css}}
