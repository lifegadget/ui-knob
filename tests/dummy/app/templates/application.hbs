{{#demo-css}}
<div class="container">
  <h1 id="title"><a href="https://github.com/lifegadget/ui-knob">ui-knob</a></h1>
  <h2>A touch friendly knob to use in your ember apps</h2>

  <h3>Background</h3>
  Anthony Terrien built a very nice and popular jQuery widget called <a href="http://anthonyterrien.com/knob"><prop>jQuery-Knob</prop></a> which this addon was inspired by but as of the 1.x series of this addon the underlying jquery has been removed in favor of SVG rendering (and a little d3 help).

  <h3>Interactive Demo</h3>
  <div class="row">
    <div class="col-xs-12 col-md-4">
      {{ui-knob
        value=value
        min=min
        max=max

        step=step
        leftRight=leftRight
        upDown=upDown

        width=width
        height=height

        thickness=thickness
        angleOffset=angleOffset
        angleArc=angleArc
        selectedPadding=selectedPadding

        displayInput=displayInput
        readOnly=readOnly
        selectedColor=selectedColor
        unselectedColor=unselectedColor
        backgroundColor=backgroundColor

        upper=upper
        lower=lower
        pre=pre
        post=post

        onChange=(action 'onChange')
        onFocus=(action 'onFocus')
        onError=(action 'onError')
      }}
    </div>
    <div class="col-xs-12 col-md-3">
      <code class='handlebars'>
        {{display-component
          componentName='ui-knob'
          value=value
          min=min
          max=max
          step=step
          width=width
          height=height
          thickness=thickness
          angleOffset=angleOffset
          angleArc=angleArc
          displayInput=displayInput
          readOnly=readOnly
          selectedColor=selectedColor
          unselectedColor=unselectedColor

          upper=upper
          lower=lower
          pre=pre
          post=post

          onChange=(mut value)
          onError=(action 'onError')
       }}
      </code>
    </div>
    <div class="col-xs-12 col-md-5">
      <controls>
        <control>
          <span class='name'>min:</span>
          <span>
            {{text-input value=min step=10 skin='flat' size='small' defaultValue=0 onChange=(mut min)}}
          </span>
          <span class='name'>max:</span>
          <span>
            {{text-input
              value=max
              step=10
              skin='flat'
              size='small'
              onBlur=(mut max)
            }}
          </span>
          <span class='name'>thickness:</span>
          <span>
            {{text-input
              value=thickness
              skin='flat'
              size='small'
              min=0
              max=1
              step=0.1
              onBlur=(mut thickness)
            }} &nbsp;
          </span>
        </control>
        <control>
          <span class='name'>angleOffset:</span>
          <span>
            {{text-input
              value=angleOffset
              skin='flat'
              size='small'
              onBlur=(mut angleOffset)
            }}
          </span>
          <span class='name'>angleArc:</span>
          <span>
            {{text-input
              value=angleArc
              skin='flat'
              size='small'
              onBlur=(mut angleArc)
            }}
          </span>
          <span class='name'>selectedPadding:</span>
          <span>
            {{text-input
              value=selectedPadding
              skin='flat'
              size='small'
              onBlur=(mut selectedPadding)
            }}
          </span>

        </control>
        <control>
          <span class='name'>step:</span>
          <span>
            {{text-input
              value=step
              skin='flat'
              size='small'
              onBlur=(mut step)
            }}
          </span>

          <span class='name'>leftRight:</span>
          <span>
            {{text-input
              value=leftRight
              skin='flat'
              size='small'
              onBlur=(mut leftRight)
            }}
          </span>
          <span class='name'>upDown:</span>
          <span>
            {{text-input
              value=upDown
              skin='flat'
              size='small'
              onBlur=(mut upDown)
            }}
          </span>
        </control>
        <control>
          <span class='name'>display input:</span>
          <span>
            {{ui-toggle-button
              size='small'
              outline=true
              on='show'
              false='hide'
              value=displayInput
              onToggle=(mut displayInput)
            }}
          </span>
          <span class='name'>read only:</span>
          <span>
            {{ui-toggle-button
              on='true'
              size='small'
              outline=true
              false='false'
              value=readOnly
              onToggle=(mut readOnly)
            }}
          </span>
        </control>
        <control>
          <span class='name'>selectedColor:</span>
          <span>
            {{text-input value=selectedColor skin='flat' size='small' defaultValue='#66CC66' onBlur=(mut selectedColor)}}
          </span>
          <span class='name'>unselectedColor:</span>
          <span>
            {{text-input value=unselectedColor skin='flat' size='small' defaultValue='#EFEEEE' onBlur=(mut unselectedColor)}}
          </span>
          <span class='name'>backgroundColor:</span>
          <span>
            {{text-input value=backgroundColor skin='flat' size='small' defaultValue='#EFEEEE' onBlur=(mut backgroundColor)}}
          </span>
        </control>

        <control>
          <span class='name'>upper:</span>
          <span>
            {{text-input
              value=upper
              skin='flat'
              size='small'
              onChange=(mut upper)
            }}
          </span>
          <span class='name'>lower:</span>
          <span>
            {{text-input
              value=lower
              step=10
              skin='flat'
              size='small'
              onChange=(mut lower)
            }}
          </span>
        </control>

        <control>
          <span class='name'>pre:</span>
          <span>
            {{text-input
              value=pre
              skin='flat'
              size='small'
              onChange=(mut pre)
            }}
          </span>
          <span class='name'>post:</span>
          <span>
            {{text-input
              value=post
              step=10
              skin='flat'
              size='small'
              onChange=(mut post)
            }}
          </span>
        </control>
      </controls>
    </div>
  </div> {{! End ROW }}

  <h3>Topics</h3>

  <h4>Angle (offset and arc)</h4>
  <div class="row">
    <div class="explanation col-xs-12">
      There are two angle properties: <code>angleOffset</code> and <code>angleArc</code>. The "offset" is the number of degrees from 0 degrees (aka, 12 O'Clock) that you want the arc to start. The "arc" is how many degrees the arc should traverse for. As a "for instance", if you wanted a complete circle then you'd set <i>offset</i> to 0 and <i>arc</i> to 360.
    </div>
  </div>

  <br>
  <h4>Thickness</h4>
  <div class="row">
    <div class="explanation col-xs-12">
      The <i>thickness</i> determines the width between the inner and outer radius of the arc shape. You can specify it in either fixed pixel units or as a percentage of the width (which is useful for some responsive scenarios). In all cases you should not specify a unit of measure (e.g., px or %) but instead any value less 1 will be treated as a percentage.
    </div>
  </div>

  <br>
  <h4>Selection Padding</h4>
  <div class="row">
    <div class="explanation col-xs-12">
      <p>
        By default the only highlighted part of the arc represents the value's perportion of the arc. This is all that's needed in most cases but where there are a large number of possible states the selector can be fairly small so adding padding becomes a way of helping the user quickly get a visual snapshot.
      </p>
      <p>
        Adding padding is done via the <code>selectedPadding</code> parameter and can be stated in three distinct ways:
      </p>
      <ul>
        <li>
          <b>Degrees</b>
          - you can specify the number of radial degrees that you'd like padded on both sides of the selected value. You do this by postfixing the number with <b>deg</b> so for a padding of 10 degrees on both sides you would set to "10deg"
        </li>
        <li>
          <b>Multiples</b>
          - by just setting as number you are stating a multiple of the current selection as a buffer on either side. So if a knob with 30 selections has a radian width of 0.19142320828324905 then setting the value of <code>selectedPadding</code> to 2 would give you <i>0.19142320828324905 x 2</i> radians on each side as padding.
        </li>
        <li>
          <b>Path</b>
          - if you set the padding to be the string value "upTo" then you'll get a one-sided pad where everything from the startAngle to the current value is padding.
        </li>
      </ul>
    </div>
  </div>


  <h4>Focus</h4>
  <div class="row">
    <div class="explanation col-xs-9">
      <p>
        This component serves as an input and therefore is "focusable" like any other HTML input control (unless set to read-only). The browser's default styling for this though is an ugly blue box which may work for a rectangular input but not a circular one. Therefore the knob's <code>outline</code> CSS property has been set to "none" and in its place we programatically ensure that the {{ui-label 'knob.focused'}} CSS class is added to the knob when it is focused.
      </p>
      <p>
        Furthermore, if you want you can also attach to the <code>onFocus()</code> event which is fired on both focus gained and lost. The interactive example above illustrates responding to these events as well as adjusting visual properties based on the CSS changes.
      </p>
    </div>
    <div class="demo col-xs-3">
      {{ui-knob width=50 height=50 value=2 min=1 max=10}}
      {{ui-knob width=50 height=50 value=5 min=1 max=10}}
      {{ui-knob width=50 height=50 value=10 min=1 max=10}}
    </div>
  </div>
  <h4>Colors</h4>
  <div class="row">
    <div class="explanation col-xs-12">
      <p>
        The preferred and default method of setting colors on this component is setting the CSS property values. Here are a list of functional targets with their CSS selectors:
      </p>
      <table class='table'>
        <tr>
          <td>{{ui-label 'knob .unselected'}}</td>
          <td>
            {{ui-pill 'svg' mood='success'}} this represents the arc which is defined by the <code>angleArc</code> and <code>angleOffset</code> properties.
          </td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .selected'}}</td>
          <td>
            {{ui-pill 'svg' mood='success'}} this is the section which represents the range (in degrees of the arc) which represent the currently set value
          </td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .selected-padding'}}</td>
          <td>
            {{ui-pill 'svg' mood='success'}} If padding is turned on (by setting the <code>displayPadding</code> property) then both sides of the selected value will be highlighted.
          </td>
        </tr>
        <tr>
          <td>{{ui-label 'knob .background-arc'}}</td>
          <td>
            {{ui-pill 'svg' mood='success'}} Determines the <i>circular</i> background color. By default this is white and would not be visible on many websites. Also, if you change the <code>outline</code> property on the knob you're able to extend the diameter of the background of the knob beyond the
          </td>
        </tr>
        <tr>
          <td>
            {{ui-label 'knob faceplate'}} <br>
            {{ui-label 'knob faceplate .upper'}} <br>
            {{ui-label 'knob faceplate .middle'}} <br>
            {{ui-label 'knob faceplate .lower'}} <br>
          </td>
          <td>
            {{ui-pill 'dom' mood='info'}} Determines the <i>circular</i> background color. By default this is white and would not be visible on many websites. Also, if you change the <code>outline</code> property on the knob you're able to extend the diameter of the background of the knob beyond the
          </td>
        </tr>
      </table>
      <p>
        Please note that all SVG selectors respond to a somewhat different set of properties than normal DOM elements, the main focus here is that you should set both the <code>stroke</code> and <code>fill</code> properties of SVG paths.
      </p>
      <p>
        In cases where using CSS classes are too static, you can also programatically set the colors using parameters: <code>unselectedColor</code>, <code>selectedColor</code>, and <code>backgroundColor</code>. In each case you can pass in either a color value or a function. The function will be passed the knob class as a parameter so it may serve as context.
      </p>
    </div>
  </div>


</div>
{{/demo-css}}
<p>
  <br>
</p>
